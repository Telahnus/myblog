<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/myblog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/myblog/" rel="alternate" type="text/html" /><updated>2017-12-03T13:27:28-04:00</updated><id>http://localhost:4000/myblog/</id><title type="html">Telahnus’ Dev Blog</title><subtitle>I'll put a description here tomorrow :P</subtitle><entry><title type="html">Day 2 - All About Jekyll</title><link href="http://localhost:4000/myblog/2017/12/02/day-2.html" rel="alternate" type="text/html" title="Day 2 - All About Jekyll" /><published>2017-12-02T12:00:00-04:00</published><updated>2017-12-02T12:00:00-04:00</updated><id>http://localhost:4000/myblog/2017/12/02/day-2</id><content type="html" xml:base="http://localhost:4000/myblog/2017/12/02/day-2.html">&lt;p&gt;This is getting posted a day late, but for good reason! I spent all evening working in Unity, thinking I’d get a few good hours of code in, write this devlog and call it a night. But, one of the first rules of coding, never expect things to go as planned… I was up until 1am trying to suss things out with Unity, before eventually giving up and going to bed, and forgot all about the devlog. My bad.&lt;/p&gt;

&lt;h2 id=&quot;my-journey-with-jekyll&quot;&gt;My Journey With Jekyll&lt;/h2&gt;

&lt;p&gt;But today is a new day! And I wanted to talk first about how I actually set up this devlog. Jekyll is a static site generator. What does that mean? Well, most websites and online blogs involve a backend with a database and server. So as you browse a page there may be some back-and-forth communication between you (the client) and the server. But with a static site, you load the page once, and that’s it.&lt;/p&gt;

&lt;h4 id=&quot;benefits-of-a-backend&quot;&gt;Benefits of a Backend&lt;/h4&gt;

&lt;p&gt;With a backend server, you can create your page in pieces, and combine or switch pieces on the fly. A blog page could have a header piece with the site’s menu, a footer piece with the contact and legal info, and a main section for the blog entry. When someone requests a page, the server knows to put together a header, footer, and the correct blog entry, and pass that to the client. When they want a different page, the server uses the same header and footer, but with a different main content section. If your contact info every changes, you can edit one file, and those changes will appear whenever that file is used to build a page.&lt;/p&gt;

&lt;h4 id=&quot;static-sites&quot;&gt;Static Sites&lt;/h4&gt;

&lt;p&gt;A static site can’t do that. Every page needs to be premade with everything it needs. So a static blog has the same header and footer code copied and pasted into every file. Which is a waste of time and effort when you start getting 10s or 100s of entries. And what if you change the menu buttons or your contact info? You’ll have to go in and edit every single page again!&lt;/p&gt;

&lt;h4 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h4&gt;

&lt;p&gt;A static site generator, like Jekyll, lets you build a site as if it had a backend server, creating pieces to mix and match. But then, just like with a lot of coding languages, it has to compile and build your site, stitching the pieces together for you. You might code the header and footer as seperate files. Jekyll will then copy and paste those into every blog page you have. It also let’s you code variables into your pages, that Jekyll recognizes and fills in when you compile and build it.&lt;/p&gt;

&lt;p&gt;The two approaches result in the same product for the client. But if you don’t or can’t have a backend server to put the pieces together on the fly, you can have a static site generator do it for you before hand.&lt;/p&gt;

&lt;h4 id=&quot;issues-with-jekyll&quot;&gt;Issues with Jekyll&lt;/h4&gt;

&lt;p&gt;One of the main difficulties working with Jekyll, is that it was not designed to work on the Windows OS. Which means extra steps, running into issues, searching for fixes, finding guides or solutions that don’t quite work because their setup is slightly different than yours, etc… Thankfully, the &lt;a href=&quot;https://programminghistorian.org/lessons/building-static-sites-with-jekyll-github-pages&quot;&gt;guide&lt;/a&gt; I found seems to work for the most part. The only real issue I had was when trying to add on the github-pages gem. This Ruby gem is supposed to be specifically made to run Jekyll with Github-Pages in mind, adding a few features and adhering to a specific file structure. But since Jekyll wasn’t designed to work on Windows, I guess some of the settings in the Github-Pages gem don’t mesh. And after an hour of messing around with Ruby, bundle, configs, etc, I called for a &lt;code class=&quot;highlighter-rouge&quot;&gt;git revert&lt;/code&gt;, and stuck with the working setup I had. And that’s where we’re at!&lt;/p&gt;

&lt;h2 id=&quot;ludum-dare-40&quot;&gt;Ludum Dare 40&lt;/h2&gt;

&lt;p&gt;I was gonna write about what I got up to in Unity yesterday that took me past midnight. But I’ve already been writing for a while and really want to get into today’s work. So maybe I’ll do a mid-afternoon update with that content!&lt;/p&gt;</content><author><name></name></author><category term="devember" /><category term="jekyll" /><category term="ld40" /><summary type="html">This is getting posted a day late, but for good reason! I spent all evening working in Unity, thinking I’d get a few good hours of code in, write this devlog and call it a night. But, one of the first rules of coding, never expect things to go as planned… I was up until 1am trying to suss things out with Unity, before eventually giving up and going to bed, and forgot all about the devlog. My bad.</summary></entry><entry><title type="html">Day 1</title><link href="http://localhost:4000/myblog/2017/12/01/day-1.html" rel="alternate" type="text/html" title="Day 1" /><published>2017-12-01T23:35:00-04:00</published><updated>2017-12-01T23:35:00-04:00</updated><id>http://localhost:4000/myblog/2017/12/01/day-1</id><content type="html" xml:base="http://localhost:4000/myblog/2017/12/01/day-1.html">&lt;h1 id=&quot;hello-world&quot;&gt;Hello, World!&lt;/h1&gt;

&lt;p&gt;Today is Day 1 of &lt;a href=&quot;devember.org&quot;&gt;Devember&lt;/a&gt;, an excuse to program and blog every day of the month. The official self-enforced contract is as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I, Telahnus, will participate to the next Devember. My Devember will be to build a full portfolio website and game demo. I promise I will program for my Devember for at least an hour, every day of the next December. I will also write a daily public devlog and will make the produced code publicly available on the internet. No matter what, I will keep my promise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not too bad, eh? Well we are kicking things off with &lt;a href=&quot;ldjam.com&quot;&gt;Ludum Dare&lt;/a&gt; 40! Running right now, until Monday 10pm (at least for me).&lt;/p&gt;

&lt;p&gt;But first things first. Setting up this dev-blog. I’m trying out the &lt;a href=&quot;jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, a static site generator, to help create my blog, and &lt;a href=&quot;pages.github.com&quot;&gt;Github Pages&lt;/a&gt; to host it. It has already been a long and arduous process, but I mainly followed this &lt;a href=&quot;https://programminghistorian.org/lessons/building-static-sites-with-jekyll-github-pages&quot;&gt;article&lt;/a&gt;. I’ll try going into more detail about it tomorrow.&lt;/p&gt;</content><author><name></name></author><category term="devember" /><category term="jekyll" /><category term="ld40" /><summary type="html">Hello, World!</summary></entry></feed>