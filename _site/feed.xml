<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://telahnus.github.io/myblog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://telahnus.github.io/myblog/" rel="alternate" type="text/html" /><updated>2017-12-06T23:41:47-04:00</updated><id>https://telahnus.github.io/myblog/</id><title type="html">Telahnus’ Dev Blog</title><subtitle>I'll put a description here tomorrow :P</subtitle><entry><title type="html">Day 6 - Getting Groovy With GUIs</title><link href="https://telahnus.github.io/myblog/2017/12/06/day-6.html" rel="alternate" type="text/html" title="Day 6 - Getting Groovy With GUIs" /><published>2017-12-06T23:30:00-04:00</published><updated>2017-12-06T23:30:00-04:00</updated><id>https://telahnus.github.io/myblog/2017/12/06/day-6</id><content type="html" xml:base="https://telahnus.github.io/myblog/2017/12/06/day-6.html">&lt;p&gt;Real short today,&lt;/p&gt;

&lt;p&gt;With the basics of the Tile system complete, I wanted to dive into GUIs (graphical user interface, the text and panels and buttons). Watched a bunch of Unity tutorial videos on the GUI system, and learned about their canvas and anchoring system. That was new and interesting, learning how the UI can stretch or move depending on how you anchor it to the canvas.&lt;/p&gt;

&lt;p&gt;So I started to add some UI elements, panels and text. Easy, with what I learned earlier. A left anchored panel to display total income, public opinion, crime rate, etc. A right anchored panel to display specific info about a single tile. But then I had to try manipulating that text through scripts. Which proved difficult.&lt;/p&gt;

&lt;p&gt;You see, Unity decided to update how they manage UI elements a few years back. However, the vast majority of online information was written before this update. So, that’s where I am. Looking for the proper way to reference the text off a UI element from within a script.&lt;/p&gt;

&lt;p&gt;Meh.&lt;/p&gt;

&lt;p&gt;Oh ya, to go along with the Devember coding challenge, I’m also giving myself a fitness challenge. 1 more pushup per day of December, counting to 3 at the top and bottom. That is all.&lt;/p&gt;</content><author><name></name></author><category term="devember" /><category term="ld40" /><summary type="html">Real short today,</summary></entry><entry><title type="html">Day 5a - Even more progress!</title><link href="https://telahnus.github.io/myblog/2017/12/05/day-5-a.html" rel="alternate" type="text/html" title="Day 5a - Even more progress!" /><published>2017-12-05T23:30:00-04:00</published><updated>2017-12-05T23:30:00-04:00</updated><id>https://telahnus.github.io/myblog/2017/12/05/day-5-a</id><content type="html" xml:base="https://telahnus.github.io/myblog/2017/12/05/day-5-a.html">&lt;h2 id=&quot;check-it-out&quot;&gt;Check It Out!!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://telahnus.github.io/myblog/assets/ld40-screencap-1.png&quot; alt=&quot;Screencap from Unity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So after supper and breaks for gaming, I added keyboard movement for the player token (little blue dude). When you move onto a blank tile (the darker grey ones), it will flip and spawn as described before. The main issues I had were with keeping all the proper references as positions and objects were updated, added, or replaced. After getting all that sorted out, I decided to spend a few minutes updating the prefabs of the tiles; giving them raised borders, changing colors, etc.&lt;/p&gt;

&lt;p&gt;System complete!&lt;/p&gt;</content><author><name></name></author><category term="devember" /><category term="ld40" /><summary type="html">Check It Out!!</summary></entry><entry><title type="html">Day 5 - Tiles Done</title><link href="https://telahnus.github.io/myblog/2017/12/05/day-5.html" rel="alternate" type="text/html" title="Day 5 - Tiles Done" /><published>2017-12-05T17:30:00-04:00</published><updated>2017-12-05T17:30:00-04:00</updated><id>https://telahnus.github.io/myblog/2017/12/05/day-5</id><content type="html" xml:base="https://telahnus.github.io/myblog/2017/12/05/day-5.html">&lt;p&gt;Today was quite productive! Despite Ludum Dare being over, I still want to finish this game. And today, I think I’ve finally got a handle on the tile generation.&lt;/p&gt;

&lt;p&gt;Yesterday I said how I was able to flip a tile, and determsine how many roads it should get. What I had not finished was orienting the new tile. So, a lot of time today was spent just trying to figure out the most effective way to do this. It also involved a lot of arguing with my buddy Sionnis. :P&lt;/p&gt;

&lt;p&gt;Anywho, after getting a tile to flip properly, determine how many roads to get, spawn the prefab, and orient it, the next step would be spawning all the new blank tiles in the free spaces around it and link everything up. This took muuuch less time than creating the flipped tile. Especially after changing how I had tiles store their neighbours and open road connections. It just meant a few extra steps when exchanging that info between the flipped tile and it’s neighbours.&lt;/p&gt;

&lt;p&gt;But now, after 5 days, I have fully functioning (but not rigorously tested) tile generation. Next steps are character movement to trigger that tile flipping. Heck, it may even get done after supper tonight!&lt;/p&gt;</content><author><name></name></author><category term="devember" /><category term="ld40" /><summary type="html">Today was quite productive! Despite Ludum Dare being over, I still want to finish this game. And today, I think I’ve finally got a handle on the tile generation.</summary></entry><entry><title type="html">Day 4 - End of Ludum Dare</title><link href="https://telahnus.github.io/myblog/2017/12/04/day-4.html" rel="alternate" type="text/html" title="Day 4 - End of Ludum Dare" /><published>2017-12-04T22:00:00-04:00</published><updated>2017-12-04T22:00:00-04:00</updated><id>https://telahnus.github.io/myblog/2017/12/04/day-4</id><content type="html" xml:base="https://telahnus.github.io/myblog/2017/12/04/day-4.html">&lt;h2 id=&quot;did-not-finish&quot;&gt;Did Not Finish&lt;/h2&gt;
&lt;p&gt;Sad face. I did not finish my game for Ludum Dare. Didn’t even come close. I spent 3 days banging my head against the tile system. To be fair, it was an ambitious design choice for starting fresh. A physics based platformer has a &lt;strong&gt;lot&lt;/strong&gt; less overhead that needs coding, as Unity can provide its own physics engine. But dealing with tiles, turns, etc is all on the programmer to code.&lt;/p&gt;

&lt;p&gt;That said, I did accomplish a few things. In my game, the map is made of tiles. These tiles start off as blank spaces. When a player moves onto them, they flip over, revealing a randomized road layout that must connect to any other existing roads around the tile. It was this problem, getting a new tile to sync up with surrounding tiles, that proved the most difficult part for me logically. I knew what I wanted to do, just not how.&lt;/p&gt;

&lt;p&gt;After hours of brain busting, I finally got the code to check surrounding tiles for existing roads, match them up with the new tile, randomly add extra roads, then create the appropriate tile for the amount of roads that it should have.&lt;/p&gt;

&lt;p&gt;But it’s way past midnight, so I’m already technically cheating for Devember by writing this blog post the next day. Tomorrow I orientate the flipped tile, and add new blank tiles surrounding the flipped one. Goodnight, world!&lt;/p&gt;</content><author><name></name></author><category term="devember" /><category term="ld40" /><summary type="html">Did Not Finish Sad face. I did not finish my game for Ludum Dare. Didn’t even come close. I spent 3 days banging my head against the tile system. To be fair, it was an ambitious design choice for starting fresh. A physics based platformer has a lot less overhead that needs coding, as Unity can provide its own physics engine. But dealing with tiles, turns, etc is all on the programmer to code.</summary></entry><entry><title type="html">Day 3 - Getting Back Into Unity</title><link href="https://telahnus.github.io/myblog/2017/12/03/day-3.html" rel="alternate" type="text/html" title="Day 3 - Getting Back Into Unity" /><published>2017-12-03T22:00:00-04:00</published><updated>2017-12-03T22:00:00-04:00</updated><id>https://telahnus.github.io/myblog/2017/12/03/day-3</id><content type="html" xml:base="https://telahnus.github.io/myblog/2017/12/03/day-3.html">&lt;p&gt;Day 3 of Ludum Dare 40 has not been much better than day 2 unfortunately. But at least I can talk a bit about Ludum Dare and Unity.&lt;/p&gt;

&lt;h2 id=&quot;ludum-dare&quot;&gt;&lt;a href=&quot;https://ldjam.com/&quot;&gt;Ludum Dare&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ludum Dare is one of the world’s largest and longest running Game Jam events. Every 4 months, we challenge creators to make a game from scratch in a weekend.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A lot of famous indie games got their start as a weekend project from Ludum Dare. This event, the 40th (which I guess means it’s been going for 10 years!), the theme is:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The more you have, the worse it is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My buddy, Sionnis, and I spent Friday night brainstorming how to use this theme. The uninventive but typical implementation might have been any sort of accumulating negative status effect, possibly gained by collecting the game’s objectives. Taking hits might slow you down, collecting coins might weigh you down and reduce your jump height, spawn more enemies as you collect more macguffins, etc.&lt;/p&gt;

&lt;p&gt;We eventually came up with an idea to have the player act as a beat cop, patrolling larger and larger portions of a city. The catch though, is that as the player’s patrol route grows in size, so to does the area that criminals can come from. It would then become a careful balancing act between adding more streets (and the businesses and people residing there) versus having more locations for criminals to spawn from, and those spawn points being further away from the player’s current position.&lt;/p&gt;

&lt;h2 id=&quot;working-in-unity&quot;&gt;Working in &lt;a href=&quot;https://unity3d.com/&quot;&gt;Unity&lt;/a&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unity is a cross-platform game engine developed by Unity Technologies, which is primarily used to develop video games and simulations for computers, consoles and mobile devices. - Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In very basic terms, Unity allows you to code a game without having to worry about how to render all the graphics and calculate all of the physics. You can plop objects into a 3D space, fiddle with their properties, and attach scripts to control their behaviour.&lt;/p&gt;

&lt;p&gt;So, whenever you start a project, the first step should be to break it down into manageable steps. My game needs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a “tile” system to represent new roads being added to the player’s patrol&lt;/li&gt;
  &lt;li&gt;a token to represent where the player is located on the map&lt;/li&gt;
  &lt;li&gt;the various actions that the player can perform&lt;/li&gt;
  &lt;li&gt;a turn system&lt;/li&gt;
  &lt;li&gt;criminals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided to start with the tile system. It involves graph theory! Nodes, edges, vertices, connectivity, I learned all about those things at university!&lt;/p&gt;

&lt;p&gt;I have not finished the tile system…&lt;/p&gt;

&lt;p&gt;One problem, is that I had not used Unity or programmed in C# in over a year. So I had to relearn a lot of basic things, like setting types for variables, something I haven’t had to do in JavaScript the past few years. But the real problem, and the real time waster, was attempting to just jump back into things, coding up a storm, realizing there is a major flaw or design problem, scrapping things and starting again, and again, and again. Sure, I’m relearning lots as I go. But it has &lt;strong&gt;NOT&lt;/strong&gt; been time efficient, which is what you need during a 3-day jam.&lt;/p&gt;

&lt;p&gt;I started by creating some very basic “prefabs” of the road tiles I would be using. Prefabs are 3D objects/models that I can reuse, spawning them as my scripts require. Then I created a high-level game manager script to oversee things, instantiate the prefabs, hold the coded representation of the game board, etc. But figuring out the best way to do that has been &lt;strong&gt;such&lt;/strong&gt; a headache. It was easy enough to instantiate each of my prefabs, but I also need to attach a script to tile to represent it in the code and track its connections, switch out the model if needed, etc. It’s an issue I have yet to solve. Earlier today, I had the idea to make a generic Tile prefab with references to the other prefabs required to model the different street shapes. But that had implementation issues when trying to switch one prefab for another but maintain the same Tile class as a script component.&lt;/p&gt;

&lt;p&gt;Tomorrow’s idea is to create a Tile Factory class, a design pattern meant to manage the creation of Tiles (both their gameobjects and their scripted information/code). Thinking about it now, I even have a few more ideas.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a method to pull &amp;amp; save Tile info then “paste” it into a new object. I don’t want every single Tile to &lt;em&gt;be&lt;/em&gt; all types of tiles, and just turn different ones on or off. I want to replace the gameobject. But script components (like the one containing the info needed to keep it in a graph) must be attached to gameobjects. So, when it comes time to switch out a blank tile for a 3-way intersection, I can save the info from the blank tile, delete the gameobject, create a new one, paste the old info in, and voila!&lt;/li&gt;
  &lt;li&gt;I should also really look into other design patterns. I could easily create some sort of inheritance patterns between the different types of tiles. There are managers, factories, and many more design patterns that would almost certainly be of help. And taking the time to document and design everything in detail should really help me get a better sense of what exactly I need to do, rather than just floundering in the water.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anyways, I really just want to burrito in bed now.&lt;/p&gt;

&lt;p&gt;Ooo, and tmrw I’ll try posting screenshots, or code snippets.&lt;/p&gt;</content><author><name></name></author><category term="devember" /><category term="ld40" /><summary type="html">Day 3 of Ludum Dare 40 has not been much better than day 2 unfortunately. But at least I can talk a bit about Ludum Dare and Unity.</summary></entry><entry><title type="html">Day 2 - All About Jekyll</title><link href="https://telahnus.github.io/myblog/2017/12/02/day-2.html" rel="alternate" type="text/html" title="Day 2 - All About Jekyll" /><published>2017-12-02T12:00:00-04:00</published><updated>2017-12-02T12:00:00-04:00</updated><id>https://telahnus.github.io/myblog/2017/12/02/day-2</id><content type="html" xml:base="https://telahnus.github.io/myblog/2017/12/02/day-2.html">&lt;p&gt;This is getting posted a day late, but for good reason! I spent all evening working in Unity, thinking I’d get a few good hours of code in, write this devlog and call it a night. But, one of the first rules of coding, never expect things to go as planned… I was up until 1am trying to suss things out with Unity, before eventually giving up and going to bed, and forgot all about the devlog. My bad.&lt;/p&gt;

&lt;h2 id=&quot;my-journey-with-jekyll&quot;&gt;My Journey With Jekyll&lt;/h2&gt;

&lt;p&gt;But today is a new day! And I wanted to talk first about how I actually set up this devlog. Jekyll is a static site generator. What does that mean? Well, most websites and online blogs involve a backend with a database and server. So as you browse a page there may be some back-and-forth communication between you (the client) and the server. But with a static site, you load the page once, and that’s it.&lt;/p&gt;

&lt;h4 id=&quot;benefits-of-a-backend&quot;&gt;Benefits of a Backend&lt;/h4&gt;

&lt;p&gt;With a backend server, you can create your page in pieces, and combine or switch pieces on the fly. A blog page could have a header piece with the site’s menu, a footer piece with the contact and legal info, and a main section for the blog entry. When someone requests a page, the server knows to put together a header, footer, and the correct blog entry, and pass that to the client. When they want a different page, the server uses the same header and footer, but with a different main content section. If your contact info every changes, you can edit one file, and those changes will appear whenever that file is used to build a page.&lt;/p&gt;

&lt;h4 id=&quot;static-sites&quot;&gt;Static Sites&lt;/h4&gt;

&lt;p&gt;A static site can’t do that. Every page needs to be premade with everything it needs. So a static blog has the same header and footer code copied and pasted into every file. Which is a waste of time and effort when you start getting 10s or 100s of entries. And what if you change the menu buttons or your contact info? You’ll have to go in and edit every single page again!&lt;/p&gt;

&lt;h4 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h4&gt;

&lt;p&gt;A static site generator, like Jekyll, lets you build a site as if it had a backend server, creating pieces to mix and match. But then, just like with a lot of coding languages, it has to compile and build your site, stitching the pieces together for you. You might code the header and footer as seperate files. Jekyll will then copy and paste those into every blog page you have. It also let’s you code variables into your pages, that Jekyll recognizes and fills in when you compile and build it.&lt;/p&gt;

&lt;p&gt;The two approaches result in the same product for the client. But if you don’t or can’t have a backend server to put the pieces together on the fly, you can have a static site generator do it for you before hand.&lt;/p&gt;

&lt;h4 id=&quot;issues-with-jekyll&quot;&gt;Issues with Jekyll&lt;/h4&gt;

&lt;p&gt;One of the main difficulties working with Jekyll, is that it was not designed to work on the Windows OS. Which means extra steps, running into issues, searching for fixes, finding guides or solutions that don’t quite work because their setup is slightly different than yours, etc… Thankfully, the &lt;a href=&quot;https://programminghistorian.org/lessons/building-static-sites-with-jekyll-github-pages&quot;&gt;guide&lt;/a&gt; I found seems to work for the most part. The only real issue I had was when trying to add on the github-pages gem. This Ruby gem is supposed to be specifically made to run Jekyll with Github-Pages in mind, adding a few features and adhering to a specific file structure. But since Jekyll wasn’t designed to work on Windows, I guess some of the settings in the Github-Pages gem don’t mesh. And after an hour of messing around with Ruby, bundle, configs, etc, I called for a &lt;code class=&quot;highlighter-rouge&quot;&gt;git revert&lt;/code&gt;, and stuck with the working setup I had. And that’s where we’re at!&lt;/p&gt;

&lt;h2 id=&quot;ludum-dare-40&quot;&gt;Ludum Dare 40&lt;/h2&gt;

&lt;p&gt;I was gonna write about what I got up to in Unity yesterday that took me past midnight. But I’ve already been writing for a while and really want to get into today’s work. So maybe I’ll do a mid-afternoon update with that content!&lt;/p&gt;</content><author><name></name></author><category term="devember" /><category term="jekyll" /><category term="ld40" /><summary type="html">This is getting posted a day late, but for good reason! I spent all evening working in Unity, thinking I’d get a few good hours of code in, write this devlog and call it a night. But, one of the first rules of coding, never expect things to go as planned… I was up until 1am trying to suss things out with Unity, before eventually giving up and going to bed, and forgot all about the devlog. My bad.</summary></entry><entry><title type="html">Day 1</title><link href="https://telahnus.github.io/myblog/2017/12/01/day-1.html" rel="alternate" type="text/html" title="Day 1" /><published>2017-12-01T23:35:00-04:00</published><updated>2017-12-01T23:35:00-04:00</updated><id>https://telahnus.github.io/myblog/2017/12/01/day-1</id><content type="html" xml:base="https://telahnus.github.io/myblog/2017/12/01/day-1.html">&lt;h1 id=&quot;hello-world&quot;&gt;Hello, World!&lt;/h1&gt;

&lt;p&gt;Today is Day 1 of &lt;a href=&quot;devember.org&quot;&gt;Devember&lt;/a&gt;, an excuse to program and blog every day of the month. The official self-enforced contract is as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I, Telahnus, will participate to the next Devember. My Devember will be to build a full portfolio website and game demo. I promise I will program for my Devember for at least an hour, every day of the next December. I will also write a daily public devlog and will make the produced code publicly available on the internet. No matter what, I will keep my promise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not too bad, eh? Well we are kicking things off with &lt;a href=&quot;ldjam.com&quot;&gt;Ludum Dare&lt;/a&gt; 40! Running right now, until Monday 10pm (at least for me).&lt;/p&gt;

&lt;p&gt;But first things first. Setting up this dev-blog. I’m trying out the &lt;a href=&quot;jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;, a static site generator, to help create my blog, and &lt;a href=&quot;pages.github.com&quot;&gt;Github Pages&lt;/a&gt; to host it. It has already been a long and arduous process, but I mainly followed this &lt;a href=&quot;https://programminghistorian.org/lessons/building-static-sites-with-jekyll-github-pages&quot;&gt;article&lt;/a&gt;. I’ll try going into more detail about it tomorrow.&lt;/p&gt;</content><author><name></name></author><category term="devember" /><category term="jekyll" /><category term="ld40" /><summary type="html">Hello, World!</summary></entry></feed>